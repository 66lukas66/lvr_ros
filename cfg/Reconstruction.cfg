#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *
import multiprocessing
import sys

gen = ParameterGenerator()

gen.add("voxelsize", 		double_t, 	0, "Voxelsize of grid used for reconstruction.", 0.1, 0, 100)
gen.add("noExtrusion", 		bool_t, 	0, "Do not extend grid. Can be used  to avoid artefacts in dense data sets but. Disabling will possibly create additional holes in sparse data sets.", False)
gen.add("intersections",	int_t, 		0, "Number of intersections used for reconstruction. If other than -1, voxelsize will calculated automatically.", -1, -1, 10000)
gen.add("pcm", 				str_t, 		0, "Point cloud manager used for point handling and normal estimation. Choose from {STANN, PCL, NABO}.", "FLANN")
gen.add("pclSmoothing",		int_t, 		0, "PCL Smoothing Factor for PCL Normal Estimation", 10, 0, 100)
gen.add("ransac", 			bool_t, 	0, "Set this flag for RANSAC based normal estimation.", False)
gen.add("decomposition", 	str_t, 		0, "Defines the type of decomposition that is used for the voxels (Standard Marching Cubes (MC), Planar Marching Cubes (PMC), Standard Marching Cubes with sharp feature detection (SF) or Tetraeder (MT) decomposition). Choose from {MC, PMC, MT, SF}", "PMC")
gen.add("optimizePlanes", 	bool_t,		0, "Shift all triangle vertices of a cluster onto their shared plane", True)
gen.add("clusterPlanes",	bool_t,		0, "Cluster planar regions based on normal threshold, do not shift vertices into regression plane.", False)
gen.add("cleanContours",	int_t,		0, "Remove noise artifacts from contours. Same values are between 2 and 4.", 0, 0, 1000)
gen.add("planeIterations",	int_t,		0, "Number of iterations for plane optimization", 3, 1, 10)
gen.add("fillHoles",		int_t,		0, "Maximum size for hole filling", 30, 0, 1000)
gen.add("danglingArtifacts",int_t,		0, "Remove dangling artifacts, i.e. remove the n smallest not connected surfaces", 0, 0, 1000)
gen.add("normalThreshold",	double_t,	0, "(Plane Normal Threshold) Normal threshold for plane optimization. Default 0.85 equals about 3 degrees.", 0.85, 0, 1)
gen.add("smallRegionThreshold",	int_t,		0, "Threshold for small region removal. If 0 nothing will be deleted.", 10, 0, 1000)
gen.add("kd", 				int_t, 		0, "Number of normals used for distance function evaluation", 50, 1, 1000)
gen.add("ki", 				int_t, 		0, "Number of normals used in the normal interpolation process", 50, 1, 1000)
gen.add("kn", 				int_t, 		0, "Size of k-neighborhood used for normal estimation", 50, 1, 1000)
gen.add("minPlaneSize",		int_t,		0, "Minimum value for plane optimzation", 7, 0, 1000)
gen.add("retesselate",		bool_t,		0, "Retesselate regions that are in a regression plane. Implies --optimizePlanes.", True)
gen.add("lineFusionThreshold",double_t,	0, "Line Fusion Threshold for fusing line segments while tesselating.", 0.01, 0, 1)
gen.add("textureAnalysis",	bool_t,		0, "Enable texture analysis features fo texture matching.", False)
gen.add("writeClassificationResult",	bool_t,		0, "Write classification results to file 'clusters.clu'", False)
gen.add("classifier",		str_t,		0, "Classfier object used to color the mesh.", "PlaneSimpsons")
gen.add("depth",			int_t,		0, "Maximum recursion depth for region growing.", 100, 0, 1000)
gen.add("recalcNormals",	bool_t,		0, "Always estimate normals, even if normals are already given.", False)
gen.add("threads",			int_t,		0, "Number of threads", multiprocessing.cpu_count(), 1, 16)
gen.add("sharpFeatThreshold",double_t,	0, "Sharp feature threshold when using sharp feature decomposition", 0.9, 0, 1)
gen.add("sharpCornThreshold",double_t,	0, "Sharp corner threshold when using sharp feature decomposition", 0.7, 0, 1)
gen.add("ecm",				str_t,		0, "Edge collapse method for mesh reduction. Choose from QUADRIC, QUADRIC_TRI, MELAX, SHORTEST", "QUADRIC")
gen.add("numEdgeCollapses",	int_t,		0, "Edge collapse count. Number of edges to collapse for mesh reduction.", 0, 0, 1000)
gen.add("texturePack",		str_t,		0, "Path to texture pack", "")
gen.add("co",				str_t,		0, "Coefficents file for texture matching based on statistics", "")
gen.add("numStatsColors",	int_t,		0, "Number of colors for texture statistics", 16, 0, 256)
gen.add("numCCVColors",		int_t,		0, "Number of colors for texture matching based on color information", 64, 0, 256)
gen.add("coherenceThreshold",int_t,		0, "Coherence threshold for texture matching based on color information", 50, 0, 256)
gen.add("colorThreshold",	double_t,	0, "Threshold for texture matching based on colors", sys.float_info.max, 0, sys.float_info.max)
gen.add("statsThreshold",	double_t,	0, "Threshold for texture matching based on statistics", sys.float_info.max, 0, sys.float_info.max)
gen.add("featureThreshold",	double_t,	0, "Threshold for texture matching based on features", sys.float_info.max, 0, sys.float_info.max)
gen.add("useCrossCorr",		bool_t,		0, "Use texture matching based on cross correlation.", False)
gen.add("patternThreshold",	double_t,	0, "Threshold for pattern extraction from textures", 100, 0, 1000)
gen.add("minTransformVotes",int_t,		0, "Minimum number of votes to consider a texture transformation as correct", 3, 1, 100)
gen.add("generateTextures", bool_t,     0, "Generate textures during finalization.", False)
gen.add("texelSize",        double_t,   0, "Texel size that determines texture resolution.", 0.01, 0, 1000)
gen.add("texMinClusterSize", int_t,     0, "Minimum number of faces in a cluster for texturizing, 0 = no limit", 100)
gen.add("texMaxClusterSize", int_t,     0, "Maximum number of faces in a cluster for texturizing, 0 = no limit", 0)



exit(gen.generate("lvr_ros", "lvr_ros", "Reconstruction"))
